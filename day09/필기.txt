평일 java1

Zoom 회의 참가
https://us06web.zoom.us/j/9742331340?pwd=Vk54K0Q0QnNOSEZFbHRCNUNBQzBRQT09

회의 ID: 974 233 1340
암호: 1900c
------------------------------------------------------------------------
1. 클래스, 메서드, 상수의 이름 규칙
 1-1. 공통 이름 규칙
  - 영어 + 숫자 + 언더바(_)의 조합이고, 첫 글자는 반드시 영어로 표기한다.
 
 1-2. 클래스 이름 규칙
  - 첫 글자는 대문자로 시작, 나머지 글자는 소문자로 표시한다
  - 두 개 이상의 단어를 조합해야 할 경우 새로운 단어는 대문자로 시작한다.
	-> class MyClass, class Member, class NetworkHelper

 1-3. 메서드, 변수이름 규칙
  - 대부분 소문자로 구성되지만, 두개 이상의 단어를 조합할 경우 새로운 단어는 
  대문자로 표시한다.
	-> int age, String userName, String memberCount

 1-4. 상수 이름 규칙
  - 모두 대문자로 표시한다.
	-> final double PI, final int COLOR

2. 생성자
 2-1. 생성자란?
  - new 키워드를 사용하여 객체가 생성될 때 자동으로 실행되는 특수한 형태의 메서드.
  - 리턴형을 명시하지 않으며, 메서드의 이름은 클래스와 동일하다.
  - 자동으로 실행된다는 특성 때문에, 객체가 생성되면서 해당 객체의 특성을 초기화 하기 위하여
  사용된다. (ex:멤버변수(전역변수)의 초기값을 할당하는 용도)

	class Foo{
		Foo(){
			// 이 안에 객체가 생성될 때 자동으로 호출된다.
		}
	}

  2-2. 기본 생성자
   - 파라미터가 없는 생성자.
   - 클래스에 특별히 생성자가 정의되지 않는 경우 Java 컴파일러는 다음과 같은
   기본생성자가 존재한다고 인식한다.

	class Foo{
		Foo(){
			// 생성자는 있지만, 내용은 비어있다.
		}
	}

  2-3. 파라미터를 갖는 생성자
   - 생성자도 메서드의 한 종류이므로 파라미터를 함께 정의하는 것이 가능하다.
   - 생성자의 파라미터를 멤버변수에 복사하는 것으로 객체의 초기화를 외부적인 요인에 의해
   처리할 수 있다.

	class Foo{
		String name;
		int age;

		Foo( String name, int age ){
			// 생성자 파라미터의 값을 멤버변수에 복사
			this.name = name;
			this.age = age;
		}
	}

   - 생성자에 파라미터가 정의된 경우 객체 생성 구문에서 해당 파라미터를 전달해야 한다.
	
	Foo obj = new Foo("자바학생",25);

3. 은닉성
 3-1. 은닉성이란?
  - 멤버변수나 메서드가 객체에 노출되지 않도록 설정하는 기법
  - 객체를 사용하는 측의 실수로 인한 기능의 오작동을 방지하기 위해, 클래스의
  일부를 숨기는 처리를 말한다.

 3-2. 적용방법
  - 변수의 이름이나 메서드 이름 앞에 "접근 한정자"를 지정한다.
  
	접근 한정자	설명
	public		모든 곳에서 접근 가능하다.
			일반적으로 모든 메서드 앞에 명시한다.

	private		클래스 안에서만 사용가능하고, 객체를 통해 접근할 수 없다.
			일반적으로 모든 멤버변수 앞에 명시한다.

	protected	현재 클래스 내의 다른 자원이나, 같은 패키지 안에 존재하는 클래스와
			하위 클래스에서 접근 가능하다. 잘 사용하지 않는다.

	default		접근 한정자를 명시하지 않은 경우. 현재 클래스 내의 다른 자원이나
			동일 패키지 내의 다른 클래스에 접근가능하다. 잘 사용하지 않는다.

 3-3. getter, setter
  - 멤버변수가 은닉된 형태로 선언된 경우 프로그램의 가장 근본적인 목적인 데이터에 접근하는
  방법이 사라지므로, 메서드를 통하여 간접적으로 접근하는 방법이 마련되어야 한다.
  - getter, setter는 은닉된 멤버변수에 간접적으로 접근하기 위하여 정의된 메서드들을
  의미하는 용어이다.
	-> Getter : 은닉된 멤버변수의 값을 리턴 하기 위한 메서드
	-> Setter : 파라미터로 전달된 값을 멤버변수에 복사하기 위한 메서드

  - 메서드 작성 예

	멤버변수 이름		getter			setter
	String userName		String getUserName()	void setUserName(String Name)
	int userAge		int getUserAge()	void setUserAge(int age)

	-> "get", "set" 접두사 뒤에 변수이름을 첫 글자가 대문자인 형태로 명시
	-> getter는 연결된 멤버변수의 데이터 타입을 리턴형으로 명시
	-> setter는 연결된 멤버변수의 데이터 타입을 파라미터 형으로 명시














