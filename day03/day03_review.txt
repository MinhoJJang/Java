
1. 연산자
 1-1. 연산자란?
   - 프로그램에서 연산을 수행하기 위하여 사용되는 특수기호들

  1-2. 대입연산자
   - 대입 연산자(=)는 좌변에 우변을 대입한다는 의미이다.
   - 수학에서는 "="기호가 대입한다는 의미와 같다는 의미로 함께
   사용되지만, Java에서는 "="기호는 "대입한다"는 의미로만 사용된다.
   - 변수에 값을 대입하는 경우 -> 일반적인 변수의 할당 과정이다.

  1-3. 사칙 연산자
   - 사칙(산술)연산자
   - 일반적인 덧셈(+), 뺄셈(-), 곱셈(*), 나눗셈(/,%)을 수행한다.
   - 사칙연산의 결과는 대입연산자를 통하여 다른 변수에 대입될 수 있다.
   - 정수(byte, short, int, long)와 실수(float, double)의 
   연산시에는 정수가 실수 형태로 자동 변환되어 처리되기 때문에, 
   결과는 실수가 된다.

   - 나눗셈에 있어서의 주의사항
	-> 10 나누기 3을 계산할 때, 수학에서는 몫3 나머지 1이라고
 	계산되어지지만, java에서는 나눗셈에 대한 두 개의 연산자로 구분

	10/3	-> 나눗셈의 몫만을 취하여 결과값은 "3"
	10%3	-> 나눗셈의 나머지만을 취하여 결과값은 "1"

   - 모든 수는 0으로 나눌 수 없다.
   
  1-4. 연산자 우선순위
   - 곱셈(*), 나눗셈(/,%)은 덧셈(+), 뺄셈(-)보다 우선한다.
   - 여러 연산자를 복합적으로 사용할 경우, 괄호로 묶여 있는 곳이 우선한다.

   - 3 + 5 / (10 - 5)
	-> 3 + 5 / 5
	-> 3 + 1
	-> 4

  1-5. 단항 연산자
   - 어떤 변수(x)의 값에 대한 계산 결과를 다시 자기 자신에게 대입하고자
   하는 경우의 약식 표현이다.

	int x = 100;
	x = x + 5;

	-> 단항 연산자 적용

	int x = 100;
	x += 5;
   
   - 단항 연산자는 모든 사칙 연산자에 표현 가능하다.
	-> +=, -=, *=, /=, %=

  1-6. 증감 연산자
   - 단항 연산자로 표현할 수 있는 식에서 계산 대상 값이 1인 경우
   덧셈과 뺄셈에 대해서는 다시 한번 축약할 수 있다.
   - 아래의 식은 모두 같은 결과를 보여준다.
	
	- 덧셈의 경우
	x = x + 1;
	x += 1;
	x++;
	++x;

	- 뺄셈의 경우
	x = x -1;
	x -= 1;
	x--;
	--x;
	
  1-7."x++"와 "++x"의 차이
   - 증감 연산자는 그 자체가 다른 연산식의 피연산자로 사용될 수 있다.
   이 때, 증감 연산자의 표시 위치에 다라 결과가 서로 다르게 적용된다.

   - x++
	-> 증감 연산자가 뒤에 표시되는 경우 ,
	현재 x의 값을 먼저 수식에 적용하고, 나중에 x에대한 1증가
	처리를 한다.

	int a = 100;
	int x = 1;
	int y = a + x++;	// y=101 , x=2

   - ++x
	->증감연산자가 앞에 표시되는 경우 먼저 현재 x의 값을
	1증가 시킨 후, 그 결과를 수식에 적용한다.

	int a = 100;
	int x = 1;
	int y = a + ++x;	// y=102, x=2

   1-8. 비교연산자
    - 같다, 다르다, 크다(초과), 크거나 같다(이상), 작다(미만),
    작거나 같다(이하)에 대한 비교를 수행하는 연산자.
	
	같다	==
	다르다	!=
	초과	>
	이상	>=
	미만	<
	이하	<=
   
   - 주어진 식이 참인지 거짓인지만 판별 가능하므로, 연산 결과는
   boolean 값으로 생성된다.

	int x = 100;
	int y = 1;
	boolean r = x 비교연산자 y;

  1-9. 논리연산자
   - 두 개 이상의 비교 연산자의 결과나 boolean 값에 대해 추가로
   "AND"나 "OR"연산을 수행하여 결과를 얻는다.

   - AND의 의미를 갖는 &&
   	-> "&&"연산자는 두 개의 boolean값을 비교하여
	모두 true인 경우에만 결과값이 true

	int num1 = 10;
	int num2 = 20;
	
	boolean r1 = (num1 == num2) && (num1 != num2);
		-> true && false -> false
	boolean r2 = (num1 != num2) && (num1 < num2);
		-> true && true -> true
	boolean r3 = !(num1 >= num2) && (num1 != num2);
		-> !(false) && true -> true && true -> true

  1-10.OR의 의미를 갖는 ||
   - "||" 연산자 두 개의 boolean 값을 비교하여 둘 중 하나라도
   true인 경우 결과가 true이다