평일 java1

Zoom 회의 참가
https://us06web.zoom.us/j/9742331340?pwd=Vk54K0Q0QnNOSEZFbHRCNUNBQzBRQT09

회의 ID: 974 233 1340
암호: 1900c
-------------------------------------------------------------
JD


1. 반복문
  1-1. for문
   - for문은 사람이 직접 처리하기에 부담스러운 반복적인 작업을 처리하기 매우
   용이하다.
   - (1) : 최초로 초기식을 설정한다.
   - (2) : 초기식을 설정한 다음에는 조건식을 판단한다.
   - (3) : 만약 조건식이 참이라면 반복적으로 동작할 구문을 1회 수행
   - (4) : 반복구문을 수행한 후, 증감식으로 이동한다.
   - (5) : 증감식을 수행한 후, 다시 조건식으로 이동한다.
   	   여전히 조건식이 참이라면 반복수행을 처리하고, 그렇지 않다면
	   for문을 종료한다.

  1-2. while문
   - while문 역시 for문과 마찬가지로 반복적인 처리를 수행하는 문법이다.
   - for문은 초기식, 조건식, 증감식을 모두 내장하는 반면,
   while문은 조건식만을 내장하기 때문에 초기식과 증감식을 외부에 따로 정의해
   주어야 한다.

	초기식;

	while( 조건식 ){
		.. 반복적으로 동작할 구문 ..

		증감식;
	}

  1-3. do ~ while문
   - 조건의 판별을 나중에 수행하는 반복문 형태
   - 초기식을 설정한 후 do{....} 안의 문장을 우선적으로 1회 실행하고 조건을
   판별하므로, 조건이 참이 아니더라도 최소 1회는 실행된다.

	초기식;

	do{
		.. 반복적으로 동작할 구문..
		증감식;
	} while(조건식);

 1-4. 무한 루프
  - 증감식이 설정되지 않거나, 증감식이 수행되더라도 조건식이 거짓이 되지 않는 형태
  - 조건식이 항상 참이므로, 반복문 종료되지 않는다.
  - 프로그램이 PC의 자원을 매우 많이 사용하게 되므로, 시스템 다운을 발생시킬 수 있다.
  
  - for 문의 무한 루프 예
	for(int i = 0; i < 10; i--){
		System.out.println(i);
	}

  - while문의 무한 루프 예
	while( true ){
		System.out.println("Hello");
	}

 1-5. 반복문의 흐름제어 기법
  - break : 반복문 안에서 break 키워드를 만나면 반복을 강제로 종료한다.
  - continue : 실행흐름이 증감식으로 강제 이동한다.

2.변수의 범위
  2-1. 변수의 범위(=변수의 스코프)
   - 자신보다 하위 블록으로 침투할 수 있다.
   - 유효한 범위의 예

	int num = 100;
	if( num == 100 ){
		// num이 현재 블록의 바깥에서 선언되었으므로 유효
		System.out.println(num);
	}
	----------------------------------------------
	int num = 100;
	for( int i = 0; i<10; i++ ){
		// 변수 num이 현재 블록 밖에서 생성되었으므로 사용가능
		System.out.println(num + i);
	}
	
    - 자신이 선언된 블록 밖으로는 빠져나갈 수 없다.
    - 허용되지 않는 범위의 예

	int num = 100;
	if( num == 100 ){
		int result = num + 100;
	}
	
	// 변수 result는 if블록 안에서 생성되었으므로 사용불가
	System.out.println(result);
	----------------------------------------------------
	for(int i = 0; i < 10; i++){
		......
	}
	
	// i가 for문을 위한 괄호 안에서 사용되었으므로 사용 불가
	System.out.println(i);

    - 블록안에서 선언된 변수는 블록 밖에서 존재하는 동일한 이름의 변수와는
    이름만 동일할 뿐, 다른 값으로 인식된다.

	int target = 100;

	if( target == 100 ){
		int num = target + 100;
	} else {
		int num = target - 100;
	}
	
3. 배열	
  int dooly_kor = 75;
  int dooly_en = 82;
  int dooly_math = 91;
  (dooly_kor + dooly_en + dooly_math )/3

 3-1. 배열이란? 
  - 변수를 그룹으로 묶은 형태의 한 종류로서, 사물함 같은 형태를 
  갖고 있다. 
  - 하나의 배열안에는 같은 종류(데이터 형)의 값들만 저장될 수 있다.

 3-2. 배열을 만드는 방법
  - 배열의 선언
	데이터형[] 배열이름;

  - 배열의 생성
	배열이름 = new 데이터형[크기];

  - 배열 생성의 예 
	// 여러개의 int형 변수를 저장할 수 있는 배열의 선언
 	int[] grade;		
	// 배열의 칸을 3칸으로 할당
	grade = new int[3];















