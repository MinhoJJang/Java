java1 평일

Zoom 회의 참가
https://us06web.zoom.us/j/9742331340?pwd=Vk54K0Q0QnNOSEZFbHRCNUNBQzBRQT09

회의 ID: 974 233 1340
암호: 1900c
-----------------------------------------------------------------------
1. 메서드
  1-1. 메서드

	public static void 메서드이름(){
		.. 수행한 연산식...
	}

  1-2. 메서드의 호출
   - 정의된 메서드는 다른 메서드를 구성하는 {...} 안에서 다음의 형식으로
   사용될 수 있으며, 이를 메서드를 호출한다고 한다.

 	메서드이름();

  1-3. 수학의 매개변수
   - 함수 f(x)는, 주어진 x값에 따라서 각각 다른 결과를 만들어 낸다.
   - 수학에서는 함수 f가 연산을 수행하기 위해서 주어지는 조건값을 매개변수 라고 한다.

	f(x) = x + 1

  1-4. 메서드 파라미터
   - JAVA프로그램의 메서드(=함수)는 자신이 실행되는데 필요한 조건값을 메서드
   이름 뒤의 괄호안에서 변수 형태로 선언한다. 이를 메서드 파라미터 라고 한다.

	public static void 메서드이름(변수형 변수이름){
		... 메서드 ...
	}

  1-5. 여러개의 매개변수
   - 특정 함수가 연산을 수행하기 위해서 두 개 이상의 조건값이 필요하다면 다음과 같이
   콤마(,)로 구분하여 명시할 수 있다.

	f(x,y) = x + y + 1

  1-6. 다중 파라미터
   - 메서드가 연산을 수행하는데 두 개 이상의 파라미터가 필요하다면 콤마(,)로 구분하여
   선언할 수 있다.

	public static void 메서드이름(변수형 변수이름, 변수형 변수이름){
		... 메서드 ...
	}

   1-7. 파라미터를 갖는 메서드의 호출
    - 메서드 정의하면서 파라미터가 명시되어 있다면 해당 메서드를 호출하면서
    파라미터를 전달해 주어야 한다.

	public static void 메서드이름(변수형 변수이름, 변수형 변수이름){
		... 메서드 ...
	}

	메서드이름(값1, 값2);

  1-8. 함수의 결과값
   - 함수는 자신이 포함하고 있는 수식에 대한 결과를 반환한다.

	f(x) = x + 1
	y = f(5)	// y에는 6이라는 결과값이 대입된다.

  1-9. 메서드의 리턴값
   - 메서드가 연산 결과를 자신이 호출된 위치에 반환하는 것을 "리턴" 이라고 하며,
   반환되는 값을 "리턴값" 이라고 한다.
   - 메서드 안에서 값을 리턴하기 위해서는 "return"이라는 키워드가 사용된다.
   - 값을 리턴하는 메서드는 선언시에 "void" 키워드 대신, 리턴하는 값에 대한
   변수형이 명시된다. void는 리턴값이 없다는 의미이다.

	public static 리턴형 메서드이름(변수형 파라미터){
		return 리턴값;
	}

  1-10. 메서드간의 호출
   - 두 개의 함수를 연립하여 사용하기
   - 함수는 서로 호출하여 사용하는 것이 가능하다.

	f1(x) = x + 1
	f2(y) = f1(y) + 10

	k = f2(5)

  1-11. 메서드간의 상호 호출
   - java의 메서드 역시 서로 호출하는것이 가능하다. 호출된 메서드가 값을 
   리턴하는 경우, 리턴받은 값을 다른 연산에 사용할 수 있다.

	public static 리턴형 메서드이름1(변수형 파라미터1){
		return 리턴값;
	}

	public static 리턴형 메서드이름2(변수형 파라미터1){
		int k = 메서드이름1(파라미터1);
		return k;
	}

2. 클래스
  2-1. 객체지향 프로그래밍과 객체
   - 객체(=Object)
   - 프로그래밍에서의 객체 : 프로그램에서 표현하고자 하는 기능을 묶기 위한 단위 

  2-2. 객체를 구성하는 단위
   - 객체를 이루는 것은 데이터와 기능이다.
	-> 데이터는 변수로 표현된다.
	-> 객체 안에 포함된 변수를 '멤버변수' 혹은 '프로퍼티'라 한다.
	-> 기능은 메서드(=함수)로 표현된다.

  2-3. 클래스와 객체의 관계
   - 객체를 생성하기 위해서는 객체의 설계도가 필요하다.
   - 클래스(=Class)
	-> 객체의 설계도 역할을 하는 프로그램 소스
	-> 공장에서 하나의 설계도를 사용하여 여러개의 제품을 생산할 수 있는 것처럼
	하나의 클래스를 통해 동일한 구조를 갖는 객체를 여러 개 생성할 수 있다.

  2-4.자동차 클래스의 예
   - 자동차의 엔진, 문, 바퀴 등과 같이 명사적인 특성은 멤버변수로 존재할 수 있다.
   - 전진, 후진 등과 같이 동사적인 특성은 메서드의 형태로 표현된다.
   - 동일한 설계로 만들어진 자동차라 하더라도 각각의 자동차를 구성하는
   부품들은 그 형태만 같을 뿐, 실제로는 각각 존재하게 된다.
   - 클래스를 작성하면서 그 안에 생성되는 멤버변수들은 여러 개의 객체간에
   서로 동일한 이름으로 존재하지만 실제로는 서로 다른 값이라는 의미

  2-5. 클래스의 기본 작성 방법
	class 클래스이름{
		멤버변수;

		void 메서드이름(){
			...
		}
	}

   - 'class'라는 예약어와 클래스의 이름을 명시하고 {...} 블록을 구성한다.
   - 멤버변수는 여러 개 존재할 수 있다. 이 때, 값을 선언과 동시에 할당할 수도 있고,
   객체를 통해 간접적으로 할당할 수 도 있다.
   - 메서드는 여러 개 존재할 수 있다. 
   - 클래스 안에 포함된 멤버변수와 메서드를 특성에 따라 그룹화 하기 위한 기법이
   클래스를 작성하는 것이라고 이해할 수 있다.

  2-6. 객체의 생성 방법
   - 객체의 선언
	클래스이름 객체이름;	

   - 객체의 할당
	객체이름 = new 클래스이름();

   - 객체의 선언과 할당의 통합
	클래스이름 객체이름 = new 클래스이름();

  2-7. 객체의 사용
   - 객체 안에 포함된 변수나 메서드는 점(.)으로 연결하여 접근한다.
	-> 객체안에 포함된 변수의 값을 다른 변수에 복사하는 경우
		
		값 = 객체이름.멤버변수;

	-> 객체 안에 포함된 변수의 값에 다른 값을 대입하는 경우

		객체이름.멤버변수 = 값;

 	-> 객체 안에 포함된 메서드를 호출하는 경우

		객체이름.메서드이름();
	
	-> 객체 안에 포함된 메서드에 파라미터를 전달하는 경우

		객체이름.메서드이름(값1, 값2, ..., 값n);

  2-8. 클래스를 정의하면서 멤버변수에 값을 직접 대입하는 경우
   - 앞 예제 Main01.java는 객체를 생성함과 동시에 객체 안에 name변수와 age변수가
   할당된 값을 포함하게 된다.
   - 같은 클래스로 객체를 여러개 생성할 경우, 모든 객체가 동일한 값을 갖게 된다.
   - 같은 클래스를 통하여 생성된 객체라 할지라도 서로 다른 값을 대입하면
   서로 독립적인 형태로 존재하게 된다.

	객체1.name = "가나다";
	객체1.age = 22;
	객체2.name = "ABC";
	객체2.age = 30;








