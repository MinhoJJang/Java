1. 배열
 1-1. 배열을 만드는 방법
  - 배열의 선언과 크기 지정에 대한 일괄처리

	데이터형[] 배열이름 = new 데이터형[크기];
	
	3개의 int형 변수를 저장할 수 있는 배열 생성
	int[] grade = new int[3];

   - 배열의 모양 : 생성된 배열은 사물함과 같이 각각의 칸에 값들이 저장되고,
   각각의 칸은 0부터 일련번호가 지정된다.(일련번호 = 배열의 인덱스)
	
  1-2. 배열에 값을 저장하기
   - 배열은 값을 저장할 수 있는 공간일 뿐, 그 자체가 값은 아니다.
   - 값이 대입되지 않은 경우, 숫자형은 0, boolean형은 false가 자동으로
   대입된다.
   - 배열안에 값을 저장하기 위해서는 인덱스 번호를 사용하여 각각의 칸에 직접
   값을 대입해야한다.

	배열이름[인덱스] = 값;

   - 둘리의 점수를 배열로 표현한 예
	int[] grade = new int[3];
	grade[0] = 75;
	grade[1] = 82;
	grade[2] = 91;

  1-3. 배열의 크기 설정과 값 할당에 대한 일괄처리
   - 배열의 크기를 지정하면서 괄호 "{...}" 안에 배열에 포함될 각 항목들을
   콤마(,)로 나열하면, 배열의 생성과 값의 할당을 일괄처리할 수 있다. 이 때는
   배열의 크기를 별도로 지정하지 않으며, "new 데이터형[]" 부분은 생략 가능하다.

	데이터형[] 배열이름 = new 데이터형[]{값1, 값2, ..., 값n};
			OR
	데이터형[] 배열이름 = {값1, 값2, ..., 값n};
	
  1-4. 배열값 사용하기
   - 배열안에 저장되어 있는 값들을 사용하여 연산이나 출력등의 처리를 위해서는
   배열에 부여된 인덱스 값을 통해서 데이터에 접근해야 한다.

	System.out.println( grade[0] );
	System.out.println( grade[1] );
	System.out.println( grade[2] );

  1-5. 배열과 반복문
   - 배열의 특성
	-> 0 ~ (배열의크기-1) 만큼의 인덱스 값을 순차적으로 갖는다.
   - 특성을 활용한 배열의 데이터의 처리
  	-> 일정 범위를 갖고 순차적으로 증가하는 인덱스 값의 특성을 활용하면
	반복문 안에서 배열의 값을 할당하거나, 할당된 값을 읽어들이는 처리가
	가능하다.
	
	// 배열의 인덱스는 0부터 전체 길이 3보다 작은 2까지이다.
	int[] grade = new int[]{ 100, 100, 90};
	for(int i = 0; i < 3;i++){
		// i번째 배열값에 대한 출력 처리
		System.out.println(grade[i]);
	}

  1-6. 배열의 크기(길이)
   - 배열의 길이를 얻기 위해서는 "배열이름.length"형식으로 접근한다.
   - grade라는 배열을 생성한 경우 배열의 길이
	-> int size = grade.length;

  1-7. 배열의 종류
   - 1차 배열
	-> 앞에서 살펴본 배열처럼 한 줄만 존재하는 사물함 같이 구성된 배열.
	-> 행에 대한 개념이 없고, 열에 대한 개념만 존재하기 때문에
	"배열이름.length"는 몇칸인지를 알아보는 기능이 된다.

   - 2차 배열
	-> 1차 배열의 각 칸에 새로운 배열을 넣는 형태
	-> 1차 배열의 각 칸은 행이 되고, 각각의 칸에 추가된 개별적인
	배열이 "열"의 개념이 되어 "행렬"을 구성하게 된다.

  1-8. 2차원 배열의 생성 방법
   - 2차원 배열의 선언
	-> 데이터 타입을 이름 뒤에 대괄호 "[]"를 행과 열에 대하여 각각 지정한다

	데이터형[][] 배열이름;

   - 2차원 배열의 크기 할당
	-> 행과 열에 대한 크기를 명시한다.

	배열이름 = new 데이터형[행][열];

   - 2차원 배열의 선언과 할당의 일괄처리

	데이터형[][] 배열이름 = new 데이터형[행][열];

   - 2차원 배열의 선언, 크기 할당, 값의 대입에 대한 일괄처리
	-> 2차원 배열의 경우 블록 괄호 '{}'를 2중으로 겹쳐서 2차원 배열을
	표현한다.
	-> 행과 열의 구분에는 콤마(,)가 사용된다.
	-> 컴파일러가 블록괄호 '{}'의 요소를 파악하면 행,열의 크기가 산출될 수 
	있으므로 배열의 크기 설정을 위한 [][]에는 배열의 크기를 명시하지 
	않는다.

	데이터형[][] 배열이름 = new 데이터형[][]{
		{0행0열의 값, 0행1열의 값, ..., 0행n열의 값},
		{1행0열의 값, 1행1열의 값, ..., 1행n열의 값},
		...
		{n행0열의 값, n행1열의 값, ..., n행n열의 값}
	};

   - 2차원 배열에 대한 값의 대입 방법
	-> 행,열에 대한 인덱스를 통하여 값을 대입한다.

	배열이름[행][열] = 값;

   - 일괄지정하는 경우

	int[][] grade = new int[][{
		{75, 82, 91}, {88, 64, 50}, {100, 100, 90}
	};

  1-9. 2차원 배열의 길이
   - 2차원 배열의 길이는 행에 대한 측면과 열에 대한 측면을 나누어서 생각해야 한다.
   - 행의 길이
	// 1차 배열의 길이는 2차 배열에서는 행의 크기로 조회된다.
	int rows = grade.length;

   - 열의 길이
	// 열의 길이는 각 행에 대하여 개별적으로 조회해야 한다.
	int cols = grade[행].length;

2. 메서드
  2-1. main()
   - 프로그램의 시작점
   - java프로그램이 시작되는 지작점을 의미하는 main은 
   "public", "static", "void", "main", "(String[] args)" 라는
   키워드로 구성된 하나의 {....}블록 이다.

  2-2. 메서드
   - f(x) = x + 1
   - f(1) = 2
   - f(5) = 6

   - 프로그램의 함수 = 메서드
	-> 특정기능(=연산)을 그룹화 해서 재사용하기 위한 단위

	public static void 메서드이름(){
		.. 수행한 연산식..
	}
